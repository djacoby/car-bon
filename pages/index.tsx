import { useEffect, useState } from 'react';
import Head from 'next/head';

import {
  Title,
  Grid,
  Container,
  Center,
  Text,
  SimpleGrid,
  Button,
  LoadingOverlay,
  TextInput,
} from '@mantine/core';


import DropdownSelect from '../components/DropdownSelect';
import MapComponent from '../components/MapComponent';

import { ApiResponse, FuelEconomyApiValue,FuelEconomyApiVehicle, OpenCageAddressLookupResponse } from '../shared/interfaces';

export default function Home() {
  const [years, updateYears] = useState([] as FuelEconomyApiValue[]);
  const [selectedYear, updateSelectedYear] = useState<string | null>(null);

  const [makes, updateMakes] = useState([] as FuelEconomyApiValue[]);
  const [selectedMake, updateSelectedMake] = useState<string | null>(null);

  const [models, updateModels] = useState([] as FuelEconomyApiValue[]);
  const [selectedModel, updateSelectedModel] = useState<string | null>(null);

  const [trims, updateTrims] = useState([] as FuelEconomyApiValue[]);
  const [selectedTrim, updateSelectedTrim] = useState<string | null>(null);

  const [vehicle, updateVehicle] = useState<FuelEconomyApiVehicle | null>(null);

  const [startAddress, updateStartAddress] = useState('');
  const [endAddress, updateEndAddress] = useState('');

  // TODO: give this a proper type
  const [startLocation, updateStartLocation] = useState<{}>();
  const [endLocation, updateEndLocation] = useState<{}>();

  const [loading, updateLoading] = useState(true);

  useEffect(() => {
    getYears();
  },[]);

  // TODO: extract these requests into an API client
  async function getYears() {
    const res: ApiResponse<FuelEconomyApiValue[]> = await (await fetch('http://localhost:3000/api/vehicle/years')).json();

    updateYears(res.result as FuelEconomyApiValue[]);
  }

  async function getMakes(year: string) {
    const res: ApiResponse<FuelEconomyApiValue[]> = await (await fetch(`http://localhost:3000/api/vehicle/makes?year=${year}`)).json();

    updateMakes(res.result as FuelEconomyApiValue[]);
  }

  async function getModels(make: string) {
    const res: ApiResponse<FuelEconomyApiValue[]> = await (await fetch(`http://localhost:3000/api/vehicle/models?year=${selectedYear}&make=${make}`)).json();

    updateModels(res.result as FuelEconomyApiValue[]);
  }

  async function getTrims(model: string) {
    const res: ApiResponse<FuelEconomyApiValue[]> = await (await fetch(`http://localhost:3000/api/vehicle/trims?year=${selectedYear}&make=${selectedMake}&model=${model}`)).json();

    updateTrims(res.result as FuelEconomyApiValue[]);
  }

  async function getVehicle() {
    const res: ApiResponse<FuelEconomyApiVehicle> = await (await fetch(`http://localhost:3000/api/vehicle/${selectedTrim}`)).json();

    updateVehicle(res.result as FuelEconomyApiVehicle);
  }

  // TODO: possibly setup our api to take both addresses as a single call?
  async function getStartCoordinates() {
    const res: ApiResponse<OpenCageAddressLookupResponse> = await (await fetch(`http://localhost:3000/api/geo-coordinates?address=${startAddress}`)).json();

    updateStartLocation(res.result);
  }

  async function getEndCoordinates() {
    const res: ApiResponse<OpenCageAddressLookupResponse> = await (await fetch(`http://localhost:3000/api/geo-coordinates?address=${endAddress}`)).json();

    updateEndLocation(res.result);
  }

  async function getCoords() {
    await getStartCoordinates();
    await getEndCoordinates();
  }

  function setYear(year: string) {
    updateSelectedYear(year);
    getMakes(year);

    updateSelectedMake(null);

    updateSelectedModel(null);
    updateModels([]);

    updateSelectedTrim(null);
    updateTrims([]);

    updateVehicle(null);
  }

  function setMake(make: string) {
    updateSelectedMake(make);
    getModels(make);

    updateSelectedModel(null);

    updateSelectedTrim(null);
    updateTrims([]);

    updateVehicle(null);
  }

  function setModel(model: string) {
    updateSelectedModel(model);
    getTrims(model);

    updateSelectedTrim(null);

    updateVehicle(null);
  }

  function resetForm() {
    updateSelectedYear(null);

    updateSelectedMake(null);
    updateMakes([]);

    updateSelectedModel(null);
    updateModels([]);

    updateSelectedTrim(null);
    updateTrims([]);

    updateVehicle(null);
  }

  return (
    <>
      <Head>
        <title>CarBon - Vehicle Carbon Calculator</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <div style={{ width: 'auto', position: 'relative' }}>
        <LoadingOverlay
          visible={loading}
          overlayBlur={2}
          loaderProps={{
            size: 'xl'
          }}
        />
        {
          <main>
            <Grid style={{ margin: 0 }}>

              <Grid.Col p={0} className='debugging-border max-height shadow' span={9}>
                <MapComponent updateLoadingFn={updateLoading} />
              </Grid.Col>

              <Grid.Col p={0} className='debugging-border' span={3}>
                <Container mt='md'>
                  <Center>
                    <Title order={1}>Welcome to CarBon!</Title>
                  </Center>
                </Container>

                <Container mt='md'>
                  <Center>
                    <Text>
                      {/* TODO: update this copy to reflect the updated functionality */}
                      Enter your vehicle information (year, make, model, trim) below.
                    </Text>
                  </Center>
                </Container>

                <Container mt='md'>
                  <DropdownSelect
                    label='Select Vehicle Year'
                    placeholder='Year'
                    data={years}
                    value={selectedYear}
                    onChangeFn={setYear}
                  />

                  <DropdownSelect
                    disabled={!selectedYear}
                    label='Select Vehicle Make'
                    placeholder='Make'
                    data={makes}
                    value={selectedMake}
                    onChangeFn={setMake}
                  />

                  <DropdownSelect
                    disabled={!selectedMake}
                    label='Select Vehicle Model'
                    placeholder='Model'
                    data={models}
                    value={selectedModel}
                    onChangeFn={setModel}
                  />

                  {
                    !!trims.length &&
                    <DropdownSelect
                      disabled={!selectedModel}
                      label='Select Vehicle Trim'
                      placeholder='Trim'
                      data={trims}
                      value={selectedTrim}
                      onChangeFn={updateSelectedTrim}
                    />
                  }

                  <SimpleGrid mt='md' mb='md' cols={2}>
                    <Button
                      color='red'
                      disabled={!selectedYear}
                      onClick={resetForm}
                      radius='md'
                    >
                      Clear
                    </Button>
                    <Button
                      disabled={!selectedTrim}
                      onClick={getVehicle}
                      radius='md'
                    >
                      Select
                    </Button>
                  </SimpleGrid>

                  {
                    vehicle &&
                    <div>
                      <p>Selected Vehicle: {vehicle.year} {vehicle.make} {vehicle.model}</p>
                      <p>Co2 Grams per Mile: {vehicle.co2TailpipeGpm}</p>
                    </div>
                  }


                  <TextInput
                    value={startAddress}
                    onChange={(event) => updateStartAddress(event.currentTarget.value)}
                    placeholder="123 Sesame Street New York, NY 10023"
                    label="Start Address"
                    radius="md"
                    mb='md'
                    withAsterisk
                  />

                  <TextInput
                    value={endAddress}
                    onChange={(event) => updateEndAddress(event.currentTarget.value)}
                    placeholder="129 W 81st St, New York, NY 10024"
                    label="End"
                    radius="md"
                    mb='md'
                    withAsterisk
                  />

                  <Button
                    onClick={getCoords}
                    radius='md'
                  >
                    Select
                  </Button>
                </Container>
              </Grid.Col>

            </Grid>


          </main>
        }
      </div>


      {/* <footer>
        Footer
      </footer> */}
    </>
  );
}
